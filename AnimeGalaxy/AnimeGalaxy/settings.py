"""
Django settings for AnimeGalaxy project.

Generated by 'django-admin startproject' using Django 2.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
import datetime
import os

import djcelery
from django.utils.translation import ugettext_lazy as _
from dotenv import load_dotenv

# Load all dotenv configurations to system environment variables
load_dotenv(verbose=True, override=True)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'i1q=0s0hx)f*aysw)z8clqul%8-^+cp%vtn6vb1r0itlx2d_sg'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
	'*'
]

# Application definition

INSTALLED_APPS = [
	# Security Apps
	'corsheaders',

	# CKEditor Support
	'ckeditor',

	'jet.dashboard',
	'jet',

	# Django Apps
	'django.contrib.admin',
	'django.contrib.sites',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',

	# Recursive models library
	'mptt',

	# Rest Framework Apps
	'rest_framework',
	'rest_framework_recursive',
	'rest_auth',
	'allauth',
	'allauth.account',
	'allauth.socialaccount',
	'rest_auth.registration',
	'django_filters',

	# Haystack
	'haystack',

	# Celery
	'djcelery',

	'main',
	'anime',
	'episode',
	'comment',
	'report',
]

MIDDLEWARE = [
	# Security Middleware
	'corsheaders.middleware.CorsMiddleware',

	# Default Security Middleware
	'django.contrib.sessions.middleware.SessionMiddleware',
	'django.middleware.locale.LocaleMiddleware',
	'django.middleware.security.SecurityMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',

]

ROOT_URLCONF = 'AnimeGalaxy.urls'

TEMPLATES = [
	{
		'BACKEND' : 'django.template.backends.django.DjangoTemplates',
		'DIRS'    : [],
		'APP_DIRS': True,
		'OPTIONS' : {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
			],
		},
	},
]

WSGI_APPLICATION = 'AnimeGalaxy.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
	'default': {
		'ENGINE'  : 'django.db.backends.postgresql_psycopg2',
		'NAME'    : 'animegalaxy',
		'USER'    : 'postgres',
		'PASSWORD': 'admin',
		'HOST'    : 'localhost',
		'PORT'    : '5432'
	}
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]

# User Model
AUTH_USER_MODEL = 'main.CustomUser'

# Rest Framework settings
REST_FRAMEWORK = {
	'DEFAULT_AUTHENTICATION_CLASSES': (
		'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
		'rest_framework.authentication.SessionAuthentication',
		'rest_framework.authentication.BasicAuthentication',
	),
	'DEFAULT_RENDERER_CLASSES'      : (
		'rest_framework.renderers.JSONRenderer',
		'rest_framework.renderers.BrowsableAPIRenderer',
	),
	'DEFAULT_FILTER_BACKENDS'       : ('django_filters.rest_framework.DjangoFilterBackend',),
	'DEFAULT_THROTTLE_RATES'        : {
		'anon': '30/min',
		'user': '60/min'
	}
}

REST_AUTH_SERIALIZERS = {
	"USER_DETAILS_SERIALIZER": "main.serializers.UserSerializer",
}
REST_AUTH_REGISTER_SERIALIZERS = {
	"REGISTER_SERIALIZER": "main.serializers.CustomRegisterSerializer",
}

REST_USE_JWT = True

JWT_AUTH = {
	'JWT_EXPIRATION_DELTA'        : datetime.timedelta(days=2),
	'JWT_ALLOW_REFRESH'           : True,
	'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=7),
}

ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_EMAIL_REQUIRED = True

SITE_ID = 1

# Cache configuration
CACHES = {
	'default': {
		'BACKEND' : 'django.core.cache.backends.memcached.MemcachedCache',
		'LOCATION': '127.0.0.1:11211',
		'TIMEOUT' : 30
	}
}

# Haystack configuration
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'
HAYSTACK_FUZZY_MIN_SIM = 0.2
HAYSTACK_CONNECTIONS = {
	'default': {
		'INCLUDE_SPELLING': True,
		'ENGINE'          : 'haystack.backends.solr_backend.SolrEngine',
		'URL'             : 'http://127.0.0.1:8983/solr/tester',
		'ADMIN_URL'       : 'http://127.0.0.1:8983/solr/admin/cores',
		'INDEX_NAME'      : 'haystack',
	},
}

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = os.getenv('LANGUAGE_CODE', 'en')

TIME_ZONE = os.getenv('TIME_ZONE', 'Europe/Lisbon')

USE_I18N = True

USE_L10N = True

USE_TZ = True

# CORS Policy
# https://github.com/ottoyiu/django-cors-headers
CORS_ORIGIN_ALLOW_ALL = True

# CKEditor Settings
# https://github.com/django-ckeditor/django-ckeditor
CKEDITOR_ALLOW_NONIMAGE_FILES = False
CKEDITOR_CONFIGS = {
	'default': {
		'tabSpaces': 4,
	}
}

# Admin dashboard configuration
JET_INDEX_DASHBOARD = 'Admin.dashboard.CustomIndexDashboard'
JET_SIDE_MENU_COMPACT = True
JET_THEMES = [
	{
		'theme': 'default',  # theme folder name
		'color': '#47bac1',  # color of the theme's button in user menu
		'title': _('Default')  # theme title
	},
	{
		'theme': 'green',
		'color': '#44b78b',
		'title': _('Green')
	},
	{
		'theme': 'light-green',
		'color': '#2faa60',
		'title': _('Light Green')
	},
	{
		'theme': 'light-violet',
		'color': '#a464c4',
		'title': _('Light Violet')
	},
	{
		'theme': 'light-blue',
		'color': '#5EADDE',
		'title': _('Light Blue')
	},
	{
		'theme': 'light-gray',
		'color': '#222',
		'title': _('Light Gray')
	}
]
JET_SIDE_MENU_ITEMS = [
	{
		'label': _('General'),
		'items': [
			{'name': 'anime.person', 'label': _('Person')},
			{'name': 'anime.studio', 'label': _('Studio')},
			{'name': 'anime.anime', 'label': _('Animes')},
			{'name': 'anime.season', 'label': _('Seasons')},
			{'name': 'episode.episode', 'label': _('Episodes')},
			{'name': 'comment.comment', 'label': _('Comments')},
			{'name': 'anime.genre', 'label': _('Genres')},
			{'name': 'report.report', 'label': _('Reports')},
		]
	},
	{
		'label': _('User Related'),
		'items': [
			{'name': 'main.customuser', 'label': _('Users')},
			{'name': 'comment.usercommentratings', 'label': _('User Comments')},
			{'name': 'episode.userepisodes', 'label': _('User Episodes')},
			{'name': 'anime.useranimes', 'label': _('User Animes')},
		]
	},
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/media/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
LOCALE_PATHS = [os.path.join(BASE_DIR, 'locale'), ]

# Celery configuration
BROKER_URL = 'amqp://guest:guest@localhost:5672//'
CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'
djcelery.setup_loader()

# Databse Logging
LOG_DB = False

if LOG_DB:
	LOGGING = {
		'disable_existing_loggers': False,
		'version'                 : 1,
		'handlers'                : {
			'console': {
				'class': 'logging.StreamHandler',
				'level': 'DEBUG',
			},
		},
		'loggers'                 : {
			''         : {
				'handlers' : ['console'],
				'level'    : 'DEBUG',
				'propagate': False,
			},
			'django.db': {
				'level': 'DEBUG'
			},
		},
	}
